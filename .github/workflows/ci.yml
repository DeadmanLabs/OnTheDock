name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run Prettier check
        run: npm run format:check

  type-check:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build library
        run: npm run build -w @org/docker-control
      
      - name: Type check
        run: npm run type-check

  unit-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test -w @org/docker-control
      
      - name: Upload coverage
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          directory: ./packages/docker-control/coverage
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    
    services:
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build library
        run: npm run build -w @org/docker-control
      
      - name: Run integration tests
        run: npm run test:integration -w @org/docker-control
        env:
          DOCKER_HOST: tcp://docker:2375

  build-library:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build library
        run: npm run build -w @org/docker-control
      
      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          ls -lah packages/docker-control/dist/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: library-build
          path: packages/docker-control/dist/

  build-backend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build library first
        run: npm run build -w @org/docker-control
      
      - name: Build backend
        run: npm run build -w backend
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: test/backend/dist/

  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build frontend
        run: npm run build -w frontend
        env:
          VITE_API_URL: http://localhost:3000
          VITE_WS_URL: ws://localhost:3000
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: test/frontend/dist/

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-library, build-backend, build-frontend]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download library build
        uses: actions/download-artifact@v3
        with:
          name: library-build
          path: packages/docker-control/dist/
      
      - name: Download backend build
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: test/backend/dist/
      
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: test/frontend/dist/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./test/backend
          file: ./test/backend/Dockerfile
          push: false
          tags: onthedock/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./test/frontend
          file: ./test/frontend/Dockerfile
          push: false
          tags: onthedock/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate || true